#!/usr/bin/ruby 
#-rtracer
#
#

require 'date'
require 'hwk'
require 'hwk/hwkfiles'

include Hwk

hwktoilet = File.join(Dir.home,'.hwk')
hwkactiveturd = File.join(hwktoilet,'active')

def hwk_mark_territory( toilet, turd )
  begin
    Dir.mkdir(toilet) unless File.exists?(toilet)
    File.open( turd, 'w+' ) { |f| f.write( Dir.getwd ) }
  rescue SystemCallError => sce
    puts( "(warning, unable to create or write to: #{toilet}: #{sce})" )
  end
end

def print_usage
  puts
  puts( "usage: [-n name] [open|edit|pdf]")
  puts( "\t-n name\t Create a new name.hwk file, prepopulated")
  puts( "\tmk\t Run the latexmk environment. Will monitor .hwk file for\n\t\t changes and latexmk will reload pdf BUGGY!")
  puts( "\ttex\t Only create the .tex file")
  puts( "\topen\t Open local .pdf file based on .hwk file.")
  puts( "\tedit\t Edit local .hwk file, currenlty only one.")
  puts( "\tpdf\t Generate and open pdf from local .hwk file.")
  puts( "\thwk\t Edit the hwk binary or some other specified library file.")
  puts( "\tactive\t Print out last directory worked in.")
  puts
  exit(true)
end

if ARGV.length < 1 or ARGV[0] == '-h'
  print_usage
end

valid_commands = ['open','edit','pdf','tex','active']
mk_env = false
only_tex = false
hwk = nil
hwk_open_app = 'Preview.app'
hwk_open_app = ENV['HWK_OPEN_APP'] unless ENV['HWK_OPEN_APP'] == nil
openoptions = "-a #{hwk_open_app}"

def edit_dsl( hwk )
  editor = ENV['EDITOR']
  editor = 'vi' if editor.nil?
  if hwk.files.dsl.exists?
    status = system( "#{editor} \"#{hwk.files.dsl}\"" );
    if status == nil || (status && status != true )
      abort("Error editing: #{$?}")
    end
    exit(true)
  else
    abort("No hwk file to open: #{hwk.files.dsl}")
  end
end

if ARGV.length > 1 and valid_commands.include?(ARGV[0])
  hwk = Homework.new( ARGV[1] )
  if hwk.files.dsl.nil?
    puts( "Did not find a hwk file in: #{ARGV[1]}" )
    exit(false)
  end
else
  hwk = Homework.new( '.' )
end

if ARGV[0] == "-n"
  if ARGV.length < 2
    abort( " -n requires filename" )
  else
    target = ARGV[1]+'.'+EXTNAME
    source = File.expand_path(File.join(TEMPLATE_DIR,NEW_HWK_FILE))

    result = system( "cp #{source} #{target}" );
    if result == false
      abort("Error copying new hwk template #{source} to #{target}: #{$?}")
    end
    exit(true)
  end
elsif ARGV[0] == 'active'
  turd = 'Dunno, not there!'
  begin
    File.open( hwkactiveturd, 'r' ) { |f| turd = f.read }
    print turd# .gsub(' ', '\\ ')
  rescue SystemCallError => sce
    puts( "#{turd} #{hwkactiveturd} #{sce}" );
  end
  exit(true)
elsif ARGV[0] == 'open'
  if hwk.files.pdf.exists?
    status = system( "open #{openoptions} -g \"#{hwk.files.pdf}\"" );
    if status == nil || (status && status != true )
      abort("Error opening: #{$?}")
    end
    exit(true)
  else
    abort("No pdf to open: #{hwk.files.pdf}")
  end
elsif ARGV[0] == "edit"
  hwk_mark_territory(hwktoilet, hwkactiveturd)
  edit_dsl( hwk )
elsif ARGV[0] == 'hwk'
  if ARGV[1].nil?
    hwk_file = HWK_DIR + File.join('bin', 'hwk');
  else
    hwk_file = HWK_DIR + File::SEPARATOR + ARGV[1]
  end
  editor = ENV['EDITOR']  # GAH
  editor = 'vi' if editor.nil?
  status = system( "#{editor} \"#{File.expand_path(hwk_file)}\"" )
  if status == nil || (status && status != true )
    abort("Error editing: #{$?}")
  end
  exit(true)
elsif ARGV[0] == 'tex'
  only_tex = true
elsif ARGV[0] == 'mk'
  mk_env = true
elsif ARGV[0] == 'pdf'
  # pass thru to default behavior
else
  print_usage
end

hwk_mark_territory(hwktoilet, hwkactiveturd)

if hwk.files.dsl.nil? || hwk.files.dsl.exists? == false
  abort( "Now homework found here" )
end

puts "Working on #{File.basename(hwk.files.dsl)}"

#set_trace_func proc{ |event, file, line, id, binding, classname|
#    printf("%8s %s:%-2d %10s %8s\n", event, file, line, id, classname) #if file =~ /my_app_name/ and event == 'return' #show only interesting files
#}


def hwk_gen( hwk, only_tex, mk_env )
  latex = 'pdflatex'
  openoptions = '-a Skim.app'
  pdflatexopts = '-shell-escape -interaction=batchmode -halt-on-error -file-line-error'
  
  begin
    hwk.load
    hwk.write_tex
  rescue StandardError => error
    puts error.backtrace
    location = error.backtrace[0].split(':')[0..1].join(':')
    msg = error.message
    if ( msg.scan(/undefined method/) )
      #msg = "Unrecognized command: #{msg.split[2]}"
    end
    abort( "Error at #{location}: #{msg}" )
  rescue SyntaxError => error
    location = error.backtrace[0].split(':')[0..1].join(':')
    msg = error.message
    if ( msg.scan(/syntax error/) )
      #msg = "Syntax error: #{msg.split[2]}"
    end
    abort( "Syntax error at #{location}: #{msg}" )
  end

  if only_tex
    puts "Created tex only: #{hwk.files.tex}"
    exit
  end


  # Clear off any old biblio files
  if hwk.files.bbl.exists?
    File.delete hwk.files.bbl
  end

  if mk_env
    return
  end

  result = nil
  if hwk.files.tex.exists?
    result = system( "#{latex} #{pdflatexopts} \"#{hwk.files.tex}\" >& pdflatex.log" )
  end

  if result && hwk.parser.bibliography?
    if hwk.files.aux.exists?
      puts "  Generate biblio from #{hwk.files.aux}"
      result = system( "bibtex \"#{hwk.files.aux}\" >& bibtex.log" )
      if result
        puts "  Re-run latex"
        result = system( "#{latex} #{pdflatexopts} \"#{hwk.files.tex}\" >& pdflatex.log" )
        if result
          result = system( "#{latex} #{pdflatexopts} \"#{hwk.files.tex}\" >& pdflatex.log" )
        end
      end
    else
      abort( "Expected #{hwk.files.aux} to exist for bibliography, but it's missing!" )
    end
  end

  if ( result == false )
    puts "Error generating PDF from tex file: #{$?}"
  else
    puts "Success!  Reopening file!" unless mk_env
    if hwk.files.pdf.exists? && mk_env == false
      system( "open #{openoptions} -g \"#{hwk.files.pdf}\"" )
    elsif hwk.files.pdf.exists? && mk_env
      system( "open #{openoptions} -g \"#{hwk.files.pdf}\"" )
    end
  end

end

def mk_tex( hwk )
  mk = 'latexmk'
  mkopts = '-pdf -pvc'
  puts "Launching #{mk} thread"
  puts "#{mk} #{mkopts} '#{hwk.files.tex}' >& latexmk.log"
  system( "#{mk} #{mkopts} '#{hwk.files.tex}' >& latexmk.log" )
end

if mk_env
  puts "Launching editor for #{hwk.files.dsl}"
  edit_thread = Thread.new{ edit_dsl( hwk ) }
  mk_thread = Thread.new{ mk_tex( hwk ) }
  while edit_thread.status != false
    hwk.files.dsl.wait_for_modification
    hwk_gen( Homework.new('.'), only_tex, mk_env )
  end
  if mk_thread.status != false
    Thread.kill(mk_thread)
  end

  exit
else
  # this seriously needs a rewrite..
  hwk_gen( hwk, only_tex, mk_env )
end


